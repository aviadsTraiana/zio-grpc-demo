buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

plugins {
    // Apply the scala plugin to add support for Scala
    id 'com.google.protobuf' version '0.8.8'
    id 'scala'
}

ext {
    scalapbVersion = '0.10.10'
}

repositories {
    jcenter()
}

dependencies {
    // Use Scala 2.12 in our library project
    implementation 'org.scala-lang:scala-library:2.12.8'
    implementation "com.thesamet.scalapb:scalapb-runtime-grpc_2.12:${scalapbVersion}"
    implementation("dev.zio:zio_2.12:1.0.7")

    // Use Scalatest for testing our library
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.scalatest:scalatest_2.12:3.0.5'

    // Need scala-xml at test runtime
    testRuntimeOnly 'org.scala-lang.modules:scala-xml_2.12:1.1.1'
    compile "com.thesamet.scalapb:scalapb-runtime_2.12:${scalapbVersion}"
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.7.1'
    }
    plugins {
        def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem()
        def artifactClassifier = os.isWindows() ? "windows@bat" : "unix@sh"
        scalapb {
            artifact = "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:$artifactClassifier"
        }
        ziopb {
            artifact = "com.thesamet.scalapb.zio-grpc:protoc-gen-zio:0.5.0:$artifactClassifier"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                scalapb {
                    // add any ScalaPB generator options here. See: https://scalapb.github.io/scalapbc.html#passing-generator-parameters
                    // option 'flat_package'
                }
                ziopb{

                }
            }
        }
    }
}

task run(type: JavaExec, dependsOn: classes) {
    main = 'scalapb.demo.Demo'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

// Add geneated Scala code as a source directory
sourceSets {
  main {
    scala {
        srcDirs = ["${protobuf.generatedFilesBaseDir}/main/scalapb","${protobuf.generatedFilesBaseDir}/main/ziopb"]
    }
  }
}
